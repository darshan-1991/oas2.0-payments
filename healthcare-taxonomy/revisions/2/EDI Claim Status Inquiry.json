{"swagger":"2.0","info":{"title":"EDI Claim Status Inquiry","description":"The EDI 276 transaction set is a Health Care Claim Status Inquiry. It is used by healthcare providers to verify the status of a claim submitted previously to a payer, such as an insurance company, HMO, government agency like Medicare or Medicaid, etc. The 276 transaction is specified by HIPAA for the electronic submission of claim status requests. The transaction typically includes:\n\n1. Provider identification\n2. Patient identification\n3. Subscriber information\n4. Date(s) of service(s)\n5. Charges\n\nThe EDI 277 Health Care Claim Status Response transaction set is used by healthcare payers (insurance companies, Medicare, etc.) to report on the status of claims (837 transactions) previously submitted by providers.","version":"v1.0.0","termsOfService":"https://acme.com/terms-and-conditions","license":{"name":"Acme EDI License","url":"https://acme.com/license"},"contact":{"name":"Thomas Hart","url":"https://acme.com/contact-us","email":"thomas@acme.com"}},"paths":{"/status-inquiry":{"parameters":[{"name":"Authorization","in":"header","required":true,"description":"","type":"string"}],"x-description":"This API is designed to assist those who request reviews (specialty care, treatment, admission) and those who respond to those requests using the 278 format.","post":{"summary":"This API is designed to assist those who request reviews (specialty care, treatment, admission) and those who respond to those requests using the 278 format.","description":"Use the Claim Status Inquiry (276) transaction to inquire about the status of a claim after it has been sent to a payer, whether submitted on paper or electronically.\n\nThe Claim Status Response (277) transaction is used to respond to a request inquiry about the status of a claim after it has been sent to a payer, whether submitted on paper or electronically.","parameters":[{"x-key":1,"name":"x-senderId","in":"header","required":true,"description":"Sender ID of the client","type":"string"},{"x-key":2,"name":"x-receiverId","in":"header","required":true,"description":"Receiver ID of the client","type":"string"},{"x-key":3,"name":"Content-Type","in":"header","required":true,"description":"Media Type of Request","x-example":"","default":"application/json","type":"string"},{"x-key":4,"name":"Accept","in":"header","required":false,"description":"Media Type of Response","default":"application/json","type":"string"},{"name":"claimsInquiryRequest","in":"body","description":"Use the Claim Status Inquiry (276) transaction to inquire about the status of a claim after it has been sent to a payer, whether submitted on paper or electronically.","required":true,"schema":{"description":"","$ref":"#/definitions/claimsRequestModel"},"x-examples":{"application/json":{"payloadType":"X12_276_Request_005010X279A1","processingMode":"RealTime","payloadId":"e51d4fae-7dec-11d0-a866-00a0c91e6da2","timestamp":"2018-06-15T15:35:45+03:00","payload":"ISA*00*          *00*          *ZZ*AVAILITY       *ZZ*BEACON963116116*210122*2010*^*00501*000003100*0*P*:~GS*HR*AVAILITY*BEACON963116116*20210122*2010*1*X*005010X212~ST*276*0001*005010X212~BHT*0010*13*23749464748*20210122*121008~HL*1**20*1~NM1*PR*2*AVAILITY CLEARINGHOUSE*****PI*BHOVO~HL*2*1*21*1~NM1*41*2*REALMED CORPORATION*****46*S00086~HL*3*2*19*1~NM1*1P*2*MONTEFIORE NYACK HOSPITAL*****XX*1104808062~HL*4*3*22*0~DMG*D8*19690411*M~NM1*IL*1*HARTE*JAMES****MI*K9055514802~TRN*1*123456789~REF*1K*499380E0E36B45A7A230516B740BB0FE00000441~REF*D9*23749464748~AMT*T3*323~DTP*472*RD8*20210118-20210118~SE*17*0001~GE*1*1~IEA*1*000003100~"}}}],"operationId":"status-inquiry","responses":{"200":{"description":"The Claim Status Response (277) transaction is used to respond to a request inquiry about the status of a claim after it has been sent to a payer, whether submitted on paper or electronically.","schema":{"$ref":"#/definitions/claimsResponseModel"},"headers":{"Content-Type":{"description":"","default":"application/json","type":"string"}},"examples":{"application/json":{"payloadType":"X12_276_Request_005010X279A1","processingMode":"RealTime","payloadId":"e51d4fae-7dec-11d0-a866-00a0c91e6da2","timestamp":"2018-06-15T15:35:45+03:00","senderId":"PRACINSI","receiverId":"BHO-541414194","payload":"ISA*00*          *00*          *ZZ*AVAILITY       *ZZ*BEACON963116116*210122*2010*^*00501*000003100*0*P*:~GS*HR*AVAILITY*BEACON963116116*20210122*2010*1*X*005010X212~ST*276*0001*005010X212~BHT*0010*13*23749464748*20210122*121008~HL*1**20*1~NM1*PR*2*AVAILITY CLEARINGHOUSE*****PI*BHOVO~HL*2*1*21*1~NM1*41*2*REALMED CORPORATION*****46*S00086~HL*3*2*19*1~NM1*1P*2*MONTEFIORE NYACK HOSPITAL*****XX*1104808062~HL*4*3*22*0~DMG*D8*19690411*M~NM1*IL*1*HARTE*JAMES****MI*K9055514802~TRN*1*123456789~REF*1K*499380E0E36B45A7A230516B740BB0FE00000441~REF*D9*23749464748~AMT*T3*323~DTP*472*RD8*20210118-20210118~SE*17*0001~GE*1*1~IEA*1*000003100~"}}},"400":{"description":"The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications.","schema":{"$ref":"#/definitions/errorSchema"}},"401":{"description":"The request requires user authentication.","schema":{"$ref":"#/definitions/errorSchema"}},"403":{"description":"The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated.","schema":{"$ref":"#/definitions/errorSchema"}},"404":{"description":"The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent.","schema":{"$ref":"#/definitions/errorSchema"}},"405":{"description":"The method specified in the Request-Line is not allowed for the resource identified by the Request-URI. The response MUST include an Allow header containing a list of valid methods for the requested resource.","schema":{"$ref":"#/definitions/errorSchema"}},"406":{"description":"The resource identified by the request is only capable of generating response entities which have content characteristics not acceptable according to the accept headers sent in the request.","schema":{"$ref":"#/definitions/errorSchema"}},"429":{"description":"Request quota settings limit","schema":{"$ref":"#/definitions/errorSchema"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","headers":{},"schema":{"$ref":"#/definitions/errorSchema"}},"501":{"description":"The server does not support the functionality required to fulfill the request. This is the appropriate response when the server does not recognize the request method and is not capable of supporting it for any resource.","schema":{"$ref":"#/definitions/errorSchema"}},"503":{"description":"The server is currently unable to handle the request due to a temporary overloading or maintenance of the server.","schema":{"$ref":"#/definitions/errorSchema"}},"504":{"description":"The server, while acting as a gateway or proxy, did not receive a timely response from the upstream server specified by the URI (e.g. HTTP, FTP, LDAP) or some other auxiliary server (e.g. DNS) it needed to access in attempting to complete the request.","schema":{"$ref":"#/definitions/errorSchema"}}},"tags":["Claims"],"security":[{"oauth2":["read","write","update","delete"]}]}}},"schemes":["https"],"x-servers":[{"description":"Sandbox Server","url":"https://sandbox.acme.com/"},{"description":"Development Server","url":"https://dev.acme.com/"},{"description":"QAT Server","url":"https://qat.acme.com/"},{"description":"Production Server","url":"https://api.acme.com/"}],"consumes":["application/json"],"produces":["application/json","application/xml","text/xml"],"tags":[{"name":"Claims","description":"This API is designed to assist those who request reviews (specialty care, treatment, admission) and those who respond to those requests using the 278 format."}],"basePath":"/v1/claims","host":"acme.com","definitions":{"claimsRequestModel":{"description":"This API is designed to assist those who request reviews (specialty care, treatment, admission) and those who respond to those requests using the 278 format.","properties":{"payloadType":{"type":"string","description":"Paylaod type of EDI X12 request"},"processingMode":{"type":"string","description":"Processing mode of the EDI 276/277 request"},"payloadID":{"type":"string","description":"ID of the EDI X12 request"},"timestamp":{"type":"string","format":"date-time","pattern":"[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) (2[0-3]|[01][0-9]):[0-5][0-9]","description":"Timestamp the request was sent in"},"payload":{"type":"string","description":"X12 EDI content or payload used for checking claim status"}},"type":"object"},"claimsResponseModel":{"description":"This API is designed to assist those who request reviews (specialty care, treatment, admission) and those who respond to those requests using the 278 format.","properties":{"payloadType":{"type":"string","description":"Paylaod type of EDI X12 request"},"processingMode":{"type":"string","description":"Processing mode of the EDI 276/277 request"},"payloadID":{"type":"string","description":"ID of the EDI X12 request"},"senderID":{"type":"string","description":"Sender ID of the EDI X12 request"},"receiverID":{"type":"string","description":"Receiver ID of the EDI X12 request"},"timestamp":{"type":"string","format":"date-time","pattern":"[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) (2[0-3]|[01][0-9]):[0-5][0-9]","description":"Timestamp the request was sent in"},"payload":{"type":"string","description":"X12 EDI content or payload used for checking claim status"}},"type":"object"},"errorSchema":{"description":"Container to hold error data model for X12 transactions","type":"object","required":["errors"],"properties":{"errors":{"type":"array","items":{"type":"object","properties":{"code":{"type":"string","example":"Security-1001"},"userMessage":{"type":"string","example":"Invalid Access Token"},"info":{"type":"string","example":"https://developers.myapi.com/errors/#Security-1001"}}}}}}},"securityDefinitions":{"oauth2":{"type":"oauth2","description":"The Client Credentials grant is used when applications request an access token to access their own resources, not on behalf of a user.","scopes":{"read":"Allow read scope","write":"Allow write scope","update":"Allow update scope","delete":"Allow delete scope"},"flow":"application","tokenUrl":"https://api.acme.com/v1/access/token"}},"parameters":{},"x-mock":true,"x-metadata":{"metadata":{"swaggerName":"6bb7467b53e248c8a62ce85c35b2eee9","revision":1,"documentation":[{"title":"Oauth 2.0 Client Credentials Flow","summary":"The Client Credentials grant is used when applications request an access token to access their own resources, not on behalf of a user.","content":"# **Client Credentials Flow**\n\nWith machine-to-machine (M2M) applications, such as CLIs, daemons, or services running on your back-end, the system authenticates and authorizes the app rather than a user. For this scenario, typical authentication schemes like username + password or social logins don't make sense. Instead, M2M apps use the Client Credentials Flow (defined in OAuth 2.0 RFC 6749, section 4.4), in which they pass along their Client ID and Client Secret to authenticate themselves and get a token.\n\n### **How it works**\n\n![](https://release.apiwiz.io/artifactory/apiwiz-images/auth-sequence-client-credentials.png)\n\n\n1. Your app authenticates with the Auth0 Authorization Server using its Client ID and Client Secret\n2. our Auth0 Authorization Server validates the Client ID and Client Secret.\n3. Your Auth0 Authorization Server responds with an Access Token.\n4. Your application can use the Access Token to call an API on behalf of itself.\n5. The API responds with requested data.\n\n### **Request Parameters**\n\n**grant_type (required)**\n\nThe grant_type parameter must be set to client_credentials.\n\n**scope (optional)**\n\nYour service can support different scopes for the client credentials grant. In practice, not many services actually support this.\n\n**Client Authentication (required)**\n\nThe client needs to authenticate themselves for this request. Typically the service will allow either additional request parameters client_id and client_secret, or accept the client ID and secret in the HTTP Basic auth header.\n\n### **Example**\n\nThe following is an example authorization code grant the service would receive.\n\n> curl --location --request POST 'https://api.acme.com/v1/auth/token' \\\n> --header 'Authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ=' \\\n> --header 'grant_type: client_credentials' \\\n> --header 'scope: read'\n"},{"title":"Using CORS","summary":"APIs are the threads that let you stitch together a rich web experience. But this experience has a hard time translating to the browser, where the options for cross-domain requests are limited to techniques like JSON-P (which has limited use due to security concerns) or setting up a custom proxy (which can be a pain to set up and maintain).","content":"# Introduction\n\nAPIs are the threads that let you stitch together a rich web experience. But this experience has a hard time translating to the browser, where the options for cross-domain requests are limited to techniques like JSON-P (which has limited use due to security concerns) or setting up a custom proxy (which can be a pain to set up and maintain).\n\nCross-Origin Resource Sharing (CORS) is a W3C spec that allows cross-domain communication from the browser. By building on top of the XMLHttpRequest object, CORS allows developers to work with the same idioms as same-domain requests.\n\nThe use-case for CORS is simple. Imagine the site alice.com has some data that the site bob.com wants to access. This type of request traditionally wouldn’t be allowed under the browser’s same origin policy. However, by supporting CORS requests, alice.com can add a few special response headers that allows bob.com to access the data.\n\nAs you can see from this example, CORS support requires coordination between both the server and client. Luckily, if you are a client-side developer you are shielded from most of these details. The rest of this article shows how clients can make cross-origin requests, and how servers can configure themselves to support CORS.\n\n# Adding CORS support to the server\n\nMost of the heavy lifting for CORS is handled between the browser and the server. The browser adds some additional headers, and sometimes makes additional requests, during a CORS request on behalf of the client. These additions are hidden from the client (but can be discovered using a packet analyzer such as Wireshark).\n\n# CORS Server Flowchart\n\n![](https://release.apiwiz.io/artifactory/apiwiz-images/cors_server_flowchart.png)"}],"category":[{"name":"Unsorted","paths":[],"definitions":[]},{"name":"Claims Response Model","paths":[],"definitions":["claimsResponseModel"]},{"name":"Claims Request Model","paths":[],"definitions":["claimsRequestModel"]},{"name":"Claims Error Model","paths":[],"definitions":["errorSchema"]},{"name":"Claims Resource Paths ","paths":["/status-inquiry"],"definitions":[]}]}},"security":[{"oauth2":["read","write","update","delete"]}]}